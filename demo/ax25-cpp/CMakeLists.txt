# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Project name
project(radio_demo_ax25_cpp)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../../cmake-build-Release/output)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

set(CONFIGURATION_NAME "Release")

# Projects


# Top project
# Define some variables
set(PROJECT_radio_demo_ax25_cpp_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/../..")



#{{{{ User Code 1
# Place your code here

# --- SysIo Begin. Do not edit by hand -----------------------------------------
# Modifies binary file paths if codelite is not used.
if (NOT CL_USED)
  set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
  set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
endif (NOT CL_USED)
# search for the sysio package, if found, add the options ...
find_package(sysio QUIET)
if (sysio_FOUND)
  message (STATUS "SysIo found !")
  link_directories(${SYSIO_LIBRARY_DIRS})
  add_definitions(${SYSIO_CFLAGS})
  include_directories(${SYSIO_INCLUDE_DIRS})
  list(APPEND LINK_OPTIONS ${SYSIO_LIBRARIES})
  include (PiBoardInfo)
  if (NOT PIBOARD_ID)
    message (STATUS "Check the target platform, you can use PIBOARD_ID to force the target...")
    GetPiBoardInfo()
  endif (NOT PIBOARD_ID)
else (sysio_FOUND)
  message (STATUS "<WARNING> SysIo not found !")
endif (sysio_FOUND)
# --- SysIo End. Do not edit by hand -------------------------------------------
#}}}}

include_directories(
    .
    .

)


# Compiler options
add_definitions(-O2)
add_definitions(-Wall)
add_definitions(
    -DNDEBUG
)


# Linker options


if(WIN32)
    # Resource options
endif(WIN32)

# Library path
set(CMAKE_LDFLAGS "${CMAKE_LDFLAGS} -L. ")

# Define the C sources
set ( C_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/radio_demo_ax25_cpp.c
)

set_source_files_properties(
    ${C_SRCS} PROPERTIES COMPILE_FLAGS 
    " -O2 -Wall")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(radio_demo_ax25_cpp ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(radio_demo_ax25_cpp ${LINK_OPTIONS})



#{{{{ User Code 3
# Place your code here
#}}}}

