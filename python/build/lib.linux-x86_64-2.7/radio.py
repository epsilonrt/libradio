# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_radio', [dirname(__file__)])
        except ImportError:
            import _radio
            return _radio
        if fp is not None:
            try:
                _mod = imp.load_module('_radio', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _radio = swig_import_helper()
    del swig_import_helper
else:
    import _radio
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class Ax25Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ax25Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ax25Node, name)
    __repr__ = _swig_repr
    def __init__(self, str = "nocall"): 
        this = _radio.new_Ax25Node(str)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _radio.delete_Ax25Node
    __del__ = lambda self : None;
    def clear(self): return _radio.Ax25Node_clear(self)
    def toStr(self): return _radio.Ax25Node_toStr(self)
    def setCallsign(self, *args): return _radio.Ax25Node_setCallsign(self, *args)
    def getCallsign(self): return _radio.Ax25Node_getCallsign(self)
    def setSsid(self, *args): return _radio.Ax25Node_setSsid(self, *args)
    def getSsid(self): return _radio.Ax25Node_getSsid(self)
    def setFlag(self, *args): return _radio.Ax25Node_setFlag(self, *args)
    def getFlag(self): return _radio.Ax25Node_getFlag(self)
    __swig_getmethods__["callsign"] = getCallsign
    __swig_setmethods__["callsign"] = setCallsign
    if _newclass: callsign = property(getCallsign, setCallsign)
    __swig_getmethods__["ssid"] = getSsid
    __swig_setmethods__["ssid"] = setSsid
    if _newclass: ssid = property(getSsid, setSsid)
    __swig_getmethods__["flag"] = getFlag
    __swig_setmethods__["flag"] = setFlag
    if _newclass: flag = property(getFlag, setFlag)

    def __str__(self): return _radio.Ax25Node___str__(self)
Ax25Node_swigregister = _radio.Ax25Node_swigregister
Ax25Node_swigregister(Ax25Node)

class Ax25Frame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ax25Frame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ax25Frame, name)
    __repr__ = _swig_repr
    CTRL_UI = _radio.Ax25Frame_CTRL_UI
    PID_NOLAYER3 = _radio.Ax25Frame_PID_NOLAYER3
    def __init__(self, dst = "nocall", src = "nocall"): 
        this = _radio.new_Ax25Frame(dst, src)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _radio.delete_Ax25Frame
    __del__ = lambda self : None;
    def clear(self): return _radio.Ax25Frame_clear(self)
    def getSrc(self): return _radio.Ax25Frame_getSrc(self)
    def getDst(self): return _radio.Ax25Frame_getDst(self)
    def repeater(self, *args): return _radio.Ax25Frame_repeater(self, *args)
    def getReplen(self): return _radio.Ax25Frame_getReplen(self)
    def addRepeater(self, *args): return _radio.Ax25Frame_addRepeater(self, *args)
    def setRepeaterFlag(self, *args): return _radio.Ax25Frame_setRepeaterFlag(self, *args)
    def setCtrl(self, *args): return _radio.Ax25Frame_setCtrl(self, *args)
    def getCtrl(self): return _radio.Ax25Frame_getCtrl(self)
    def setPid(self, *args): return _radio.Ax25Frame_setPid(self, *args)
    def getPid(self): return _radio.Ax25Frame_getPid(self)
    def setInfo(self, *args): return _radio.Ax25Frame_setInfo(self, *args)
    def getInfo(self): return _radio.Ax25Frame_getInfo(self)
    def getInfolen(self): return _radio.Ax25Frame_getInfolen(self)
    def toStr(self): return _radio.Ax25Frame_toStr(self)
    __swig_getmethods__["ctrl"] = getCtrl
    __swig_setmethods__["ctrl"] = setCtrl
    if _newclass: ctrl = property(getCtrl, setCtrl)

    __swig_getmethods__["pid"] = getPid
    __swig_setmethods__["pid"] = setPid
    if _newclass: pid = property(getPid, setPid)

    __swig_getmethods__["src"] = getSrc
    if _newclass: src = property(getSrc, None)

    __swig_getmethods__["dst"] = getDst
    if _newclass: dst = property(getDst, None)

    __swig_getmethods__["info"] = getInfo
    if _newclass: info = property(getInfo, None)

    __swig_getmethods__["infolen"] = getInfolen
    if _newclass: infolen = property(getInfolen, None)

    __swig_getmethods__["replen"] = getReplen
    if _newclass: replen = property(getReplen, None)

    def __str__(self): return _radio.Ax25Frame___str__(self)
Ax25Frame_swigregister = _radio.Ax25Frame_swigregister
Ax25Frame_swigregister(Ax25Frame)
cvar = _radio.cvar
Ax25Frame.maxRepeater = _radio.cvar.Ax25Frame_maxRepeater

class Ax25(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ax25, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ax25, name)
    __repr__ = _swig_repr
    CTRL_UI = _radio.Ax25_CTRL_UI
    PID_NOLAYER3 = _radio.Ax25_PID_NOLAYER3
    SUCCESS = _radio.Ax25_SUCCESS
    FILE_ACCESS_ERROR = _radio.Ax25_FILE_ACCESS_ERROR
    ILLEGAL_CALLSIGN = _radio.Ax25_ILLEGAL_CALLSIGN
    INVALID_FRAME = _radio.Ax25_INVALID_FRAME
    CRC_ERROR = _radio.Ax25_CRC_ERROR
    NOT_ENOUGH_MEMORY = _radio.Ax25_NOT_ENOUGH_MEMORY
    NOT_ENOUGH_REPEATER = _radio.Ax25_NOT_ENOUGH_REPEATER
    OBJECT_NOT_FOUND = _radio.Ax25_OBJECT_NOT_FOUND
    FILE_NOT_FOUND = _radio.Ax25_FILE_NOT_FOUND
    ILLEGAL_REPEATER = _radio.Ax25_ILLEGAL_REPEATER
    NO_FRAME_RECEIVED = _radio.Ax25_NO_FRAME_RECEIVED
    def __init__(self): 
        this = _radio.new_Ax25()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _radio.delete_Ax25
    __del__ = lambda self : None;
    def clear(self): return _radio.Ax25_clear(self)
    def getError(self): return _radio.Ax25_getError(self)
    def setFdout(self, *args): return _radio.Ax25_setFdout(self, *args)
    def getFdout(self): return _radio.Ax25_getFdout(self)
    def setFdin(self, *args): return _radio.Ax25_setFdin(self, *args)
    def getFdin(self): return _radio.Ax25_getFdin(self)
    def poll(self): return _radio.Ax25_poll(self)
    def send(self, *args): return _radio.Ax25_send(self, *args)
    def read(self, *args): return _radio.Ax25_read(self, *args)
    __swig_getmethods__["fdin"] = getFdin
    __swig_setmethods__["fdin"] = setFdin
    if _newclass: fdin = property(getFdin, setFdin)

    __swig_getmethods__["fdout"] = getFdout
    __swig_setmethods__["fdout"] = setFdout
    if _newclass: fdout = property(getFdout, setFdout)

    __swig_getmethods__["error"] = getError
    if _newclass: error = property(getError, None)

Ax25_swigregister = _radio.Ax25_swigregister
Ax25_swigregister(Ax25)

class Tnc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Tnc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Tnc, name)
    __repr__ = _swig_repr
    SOH = _radio.Tnc_SOH
    STX = _radio.Tnc_STX
    ETX = _radio.Tnc_ETX
    EOT = _radio.Tnc_EOT
    TXT = _radio.Tnc_TXT
    CRC = _radio.Tnc_CRC
    SUCCESS = _radio.Tnc_SUCCESS
    CRC_ERROR = _radio.Tnc_CRC_ERROR
    NOT_ENOUGH_MEMORY = _radio.Tnc_NOT_ENOUGH_MEMORY
    OBJECT_NOT_FOUND = _radio.Tnc_OBJECT_NOT_FOUND
    ILLEGAL_MSG = _radio.Tnc_ILLEGAL_MSG
    FILE_NOT_FOUND = _radio.Tnc_FILE_NOT_FOUND
    IO_ERROR = _radio.Tnc_IO_ERROR
    NO_PACKET = _radio.Tnc_NO_PACKET
    APRS_PACKET = _radio.Tnc_APRS_PACKET
    SSDV_PACKET = _radio.Tnc_SSDV_PACKET
    UNKN_PACKET = _radio.Tnc_UNKN_PACKET
    def __init__(self, iRxBufferSize = 80): 
        this = _radio.new_Tnc(iRxBufferSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _radio.delete_Tnc
    __del__ = lambda self : None;
    def getError(self): return _radio.Tnc_getError(self)
    def setFdout(self, *args): return _radio.Tnc_setFdout(self, *args)
    def getFdout(self): return _radio.Tnc_getFdout(self)
    def setFdin(self, *args): return _radio.Tnc_setFdin(self, *args)
    def getFdin(self): return _radio.Tnc_getFdin(self)
    def poll(self): return _radio.Tnc_poll(self)
    def getRxlen(self): return _radio.Tnc_getRxlen(self)
    def getPacketType(self): return _radio.Tnc_getPacketType(self)
    def getSsdvImageId(self): return _radio.Tnc_getSsdvImageId(self)
    def getSsdvPacketId(self): return _radio.Tnc_getSsdvPacketId(self)
    def write(self, *args): return _radio.Tnc_write(self, *args)
    def read(self, *args): return _radio.Tnc_read(self, *args)
    def malloc(self, *args): return _radio.Tnc_malloc(self, *args)
    def free(self, *args): return _radio.Tnc_free(self, *args)
    def fopen(self, *args): return _radio.Tnc_fopen(self, *args)
    def fclose(self, *args): return _radio.Tnc_fclose(self, *args)
    def fread(self, *args): return _radio.Tnc_fread(self, *args)
    def fwrite(self, *args): return _radio.Tnc_fwrite(self, *args)
    def feof(self, *args): return _radio.Tnc_feof(self, *args)
    def ferror(self, *args): return _radio.Tnc_ferror(self, *args)
    __swig_getmethods__["fdin"] = getFdin
    __swig_setmethods__["fdin"] = setFdin
    if _newclass: fdin = property(getFdin, setFdin)

    __swig_getmethods__["fdout"] = getFdout
    __swig_setmethods__["fdout"] = setFdout
    if _newclass: fdout = property(getFdout, setFdout)

    __swig_getmethods__["error"] = getError
    if _newclass: error = property(getError, None)

    __swig_getmethods__["rxlen"] = getRxlen
    if _newclass: rxlen = property(getRxlen, None)

    __swig_getmethods__["packet_type"] = getPacketType
    if _newclass: packet_type = property(getPacketType, None)

    __swig_getmethods__["ssdv_image_id"] = getSsdvImageId
    if _newclass: ssdv_image_id = property(getSsdvImageId, None)

    __swig_getmethods__["ssdv_packet_id"] = getSsdvPacketId
    if _newclass: ssdv_packet_id = property(getSsdvPacketId, None)

Tnc_swigregister = _radio.Tnc_swigregister
Tnc_swigregister(Tnc)

class Serial(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Serial, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Serial, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _radio.new_Serial()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _radio.delete_Serial
    __del__ = lambda self : None;
    def open(self, *args): return _radio.Serial_open(self, *args)
    def close(self): return _radio.Serial_close(self)
    def fileno(self): return _radio.Serial_fileno(self)
    def flush(self): return _radio.Serial_flush(self)
Serial_swigregister = _radio.Serial_swigregister
Serial_swigregister(Serial)

# This file is compatible with both classic and new-style classes.


